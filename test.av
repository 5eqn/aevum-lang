-- Nat equivalent.
data G : Type where
  X : G
  Y : G -> G

-- Basic G-dependent type.
data A : G -> Type where
  U : A X
  V : (n : G) -> A n -> A (Y n)

-- Cased identity function of G.
f : G -> G
f = \n => case n of
  X => X
  Y r => Y (f r)  -- r cannot be m

-- "Add" function of A.
g : (m : G) -> A m -> A (f m)
g = \u => case u of
  X => \x => x
  Y p => \y => case y of
    V p x => V (f p) (g p x)

-- Wrong version of `g`.
g : (m : G) -> A m -> A (f m)
g = \u => case u of
  X => \x => x
  Y p => \y => case y of
    V q x => V (f p) (g p x)

-- Fn-dependent type.
data F : (G -> G) -> Type where
  Default : F (\x => case x of
    X => Y X
    Y m => Y m)
  Zero : F (\x => X)

-- Function match.
t : F (\y => case y of
  X => Y X
  Y u => Y u)
t = Default

-- Match error.
err : F (\y => f y)
err = Zero
